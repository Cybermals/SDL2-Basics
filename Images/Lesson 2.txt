Lesson 2: Loading and Drawing Images
====================================

 In this lesson we are going to load and draw some images. By itself, SDL2 can only
load BMP format images. But if we use the SDL2_image extension, we can load other
formats like PNG and JPEG. We will need to include the SDL2_image header for starters:

#include <SDL2/SDL_image.h>

 Before we can use SDL2_image, we will need to initialize it:
 
//Init SDL2_image
SDL_Log("%s", "Initializing SDL2_image...");
    
if(IMG_Init(IMG_INIT_PNG) != IMG_INIT_PNG)
{
    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "%s", SDL_GetError());
    return 1;
}

 The "IMG_Init" takes one parameter that indicates what types of images we will need
to load. In this case, we just want to load PNG format images. The return value of
the function is the same as the first parameter if initialization succeeded. To
simplify things, we will next define a type that represents the bubble we will be
drawing:

typedef struct
{
    SDL_Texture *tex;
    SDL_Rect rect;
    SDL_Point velocity;
} Bubble;

 As you can see, we will need to store the texture, rectangle, and velocity of our
bubble. Which is why using a struct is simpler. We will also create an image loading
function:

SDL_Texture *LoadImage(const char *filename, SDL_Rect *rect)
{
    //Load the image file
    SDL_Surface *img = IMG_Load(filename);
    
    if(!img)
    {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "%s", SDL_GetError());
        return NULL;
    }
    
    //Fill out the given rect
    if(rect)
    {
        rect->x = 0;
        rect->y = 0;
        rect->w = img->w;
        rect->h = img->h;
    }
    
    //Create a texture from the image
    SDL_Texture *tex = SDL_CreateTextureFromSurface(renderer, img);
    
    if(!tex)
    {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "%s", SDL_GetError());
    }
    
    //Free the image and return the texture
    SDL_FreeSurface(img);
    return tex;
}

 The "IMG_Load" function takes a filename as a parameter and returns an SDL_Surface
containing the data for the image we told it to load. If it fails, it returns NULL.
Once we have loaded an image, we will write its size into the rect referred to by
the given pointer if it isn't NULL. Then we will call "SDL_CreateTextureFromSurface"
to create a new texture from the SDL_Surface we have. That function takes our renderer
and our surface as parameters and returns a texture pointer. If it fails, it returns
NULL. Then we can free the surface and return the texture. Next, we will create a
bubble and load an image for it:

//Create a bubble
Bubble bubble;
bubble.tex = LoadImage("data/images/bubble.png", &bubble.rect);
    
if(!bubble.tex)
{
    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "%s", 
        "Failed to create a bubble.");
    return 1;
}
    
bubble.rect.w *= 2;
bubble.rect.h *= 2;
bubble.velocity.x = 1;
bubble.velocity.y = 1;

 Notice that we also initialize the bubble rectangle here. For this lesson, I am
going to double the size of the bubble by multiplying its width and height by 2. We
also need to initialize its velocity. I will be using 1 for the x and y velocity. Now
we need to draw the bubble after we clear the window each frame:

//Update the bubble
bubble.rect.x += bubble.velocity.x;
bubble.rect.y += bubble.velocity.y;
        
if(bubble.rect.x < 0 || bubble.rect.x + bubble.rect.w > windowSize.x - 1)
{
    bubble.velocity.x = -bubble.velocity.x;
}
        
if(bubble.rect.y < 0 || bubble.rect.y + bubble.rect.h > windowSize.y - 1)
{
    bubble.velocity.y = -bubble.velocity.y;
}
        
SDL_RenderCopy(renderer, bubble.tex, NULL, &bubble.rect);

 First we need to add the velocity to the position of the bubble. Then we will check
if the bubble has gone off the left or right edge of the window. If it has, we will
invert the x velocity. Then we repeat the same for the y velocity. Afterward, we will
call "SDL_RenderCopy" to draw the bubble in the window. This function takes 4
parameters. The first is our renderer. The second is the texture we want to draw in
the window. The third is the rectangular area of the texture we want to draw. NULL
means the whole texture. The fourth parameter is the rectangular area of the window
where we want to draw our texture. Now I bet you are wondering where I have gotten
the window size from. I will show you now. First I have added a new global:

SDL_Point windowSize;

 And here is how I get the window size:
 
#ifdef __ANDROID__
SDL_Rect screen;
SDL_GetDisplayUsableBounds(0, &screen);
windowSize.x = screen.w;
windowSize.y = screen.h;
#else
SDL_GetWindowSize(window, &windowSize.x, &windowSize.y);
#endif

 Getting the window size on a PC is simple. Just call "SDL_GetWindowSize". The first
parameter is our window, the second is a pointer to the variable that will receive
the width, and the third is a pointer to the variable that will receive the height.
However on Android, the above method sometimes yields incorrect values. Therefore, I
use a different method on Android to get the window size. I start by getting the
usable display bounds. The "SDL_GetDisplayUsableBounds" function takes 2 parameters.
The first is the index of the display and the second is a pointer to a rect that the
result will be written to. Then I simply store the width and height into the window
size structure. I would also like to point out that we never freed the bubble
texture. This is because destroying our renderer destroys all textures associated
with it.
 In the next lesson, we will make our app interactive.
